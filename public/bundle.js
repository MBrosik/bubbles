!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var I in Q)F.d(B,I,function(U){return Q[U]}.bind(null,I));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="public",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "default", function() { return /* binding */ main_Main; });\n\n// CONCATENATED MODULE: ./src/decorators/setPoints.ts\n// {@link import("../square.ts").default} \r\n/**\r\n * @description extension of square method\r\n */\r\nfunction setPoints(_target, _name, descriptor) {\r\n    let func = descriptor.value;\r\n    descriptor.value = function (...args) {\r\n        let bool = func.bind(this)(...args);\r\n        document.getElementById("points-container").innerText = this.result.toString();\r\n        return bool;\r\n    };\r\n}\r\n\n// CONCATENATED MODULE: ./src/enums/colorType.ts\n/** @description enum of colors */\r\nvar colorType;\r\n(function (colorType) {\r\n    colorType["blue"] = "blue";\r\n    colorType["purple"] = "purple";\r\n    colorType["green"] = "green";\r\n    // yellow = "yellow",\r\n    // red = "red",\r\n    // brown = "brown",\r\n    // aqua = "aqua",\r\n    // blue,\r\n    // red ,\r\n    // green\r\n})(colorType || (colorType = {}));\r\nconsole.log(colorType);\r\n// export let colorArr:colorType[] = <colorType[]> <unknown>Object.keys(colorType)\r\n\n// CONCATENATED MODULE: ./src/utils/randomEnum.ts\n/**\r\n * @description returns random Value from enum\r\n * @param anEnum enum target\r\n */\r\nfunction randomEnum(anEnum) {\r\n    let enumValues = Object.keys(anEnum)\r\n        .map(n => Number.parseInt(n))\r\n        .filter(n => !Number.isNaN(n));\r\n    if (enumValues.length == 0) {\r\n        enumValues = Object.keys(anEnum);\r\n    }\r\n    const randomIndex = enumValues[Math.floor(Math.random() * enumValues.length)];\r\n    const randomEnumValue = anEnum[randomIndex];\r\n    return randomEnumValue;\r\n}\r\n\n// CONCATENATED MODULE: ./src/NextBallsContainer.ts\n\r\n\r\n/** @description display and randomize colors */\r\nclass NextBallsContainer_NextBallsContainer {\r\n    /**\r\n     * @param parent reference to parent element\r\n     */\r\n    constructor(parent) {\r\n        this.parent = parent;\r\n        this.html = document.querySelector(".next-container");\r\n        this.arr = [];\r\n        this.randomizeColors();\r\n    }\r\n    /** @description randomize colors */\r\n    randomizeColors() {\r\n        this.arr = new Array(3).fill(null).map(el => randomEnum(colorType));\r\n        this.html.innerHTML = "";\r\n        this.arr.forEach(el => {\r\n            let ball = document.createElement("div");\r\n            ball.classList.add("ball");\r\n            ball.style.backgroundColor = el;\r\n            console.log(this.html);\r\n            this.html.appendChild(ball);\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/pathFinder.ts\n/**\r\n * @description function which is searching the best path\r\n * @param table table of squares\r\n */\r\nfunction pathFinder(table) {\r\n    let table1 = table;\r\n    // --------------------------\r\n    // set start and meta\r\n    // --------------------------\r\n    let start = table1.find(el => el.status == "S");\r\n    let meta = table1.find(el => el.status == "M");\r\n    let toMeta = Math.sqrt(Math.pow(start.x - meta.x, 2) + Math.pow(start.y - meta.y, 2));\r\n    start.calc = { toStart: 0, toMeta: toMeta, total: toMeta, path: 0 };\r\n    // --------------------------\r\n    // create tables\r\n    // --------------------------\r\n    let openTable = [start];\r\n    let closedTable = [];\r\n    let crossSearch = [\r\n        [-1, 0],\r\n        [1, 0],\r\n        [0, -1],\r\n        [0, 1],\r\n    ];\r\n    // --------------------------\r\n    // loops\r\n    // --------------------------\r\n    while (true) {\r\n        if (openTable.length == 0)\r\n            break;\r\n        // --------------------------\r\n        // check for best Square\r\n        // --------------------------\r\n        let current = openTable.reduce((previous, current) => {\r\n            if (previous.calc.total < current.calc.total) {\r\n                return previous;\r\n            }\r\n            else if (previous.calc.total == current.calc.total && previous.calc.toMeta < current.calc.toMeta) {\r\n                return previous;\r\n            }\r\n            else {\r\n                return current;\r\n            }\r\n        });\r\n        // --------------------------\r\n        // Migrate Square\r\n        // --------------------------\r\n        openTable.removeIf(el => el == current);\r\n        closedTable.push(current);\r\n        // --------------------------\r\n        // if meta\r\n        // --------------------------\r\n        if (current == meta)\r\n            break;\r\n        // --------------------------\r\n        // check for neighbors\r\n        // --------------------------\r\n        for (const cross of crossSearch) {\r\n            let neighbor = table1.find(el => el.x == current.x + cross[0] && el.y == current.y + cross[1]);\r\n            if (neighbor == undefined)\r\n                continue;\r\n            // ---------------------------------------\r\n            // if neighbor is in closed arr or border\r\n            // ---------------------------------------\r\n            if (neighbor.status == "B" || closedTable.find(el => el == neighbor) != null)\r\n                continue;\r\n            // ---------------------------------------\r\n            // if not in openTable\r\n            // ---------------------------------------\r\n            let toParent = Math.sqrt(Math.pow(neighbor.x - current.x, 2) + Math.pow(neighbor.y - current.y, 2));\r\n            if (openTable.find(el => el == neighbor) == null) {\r\n                let toStart = Math.sqrt(Math.pow(neighbor.x - start.x, 2) + Math.pow(neighbor.y - start.y, 2));\r\n                let toMeta = Math.sqrt(Math.pow(neighbor.x - meta.x, 2) + Math.pow(neighbor.y - meta.y, 2));\r\n                let total = toStart + toMeta;\r\n                neighbor.calc = { toStart, toMeta, total, path: current.calc.path + toParent };\r\n                neighbor.parent = current;\r\n                openTable.push(neighbor);\r\n            }\r\n            // --------------------------\r\n            // change parent\r\n            // --------------------------         \r\n            else if (current.calc.path + toParent < current.calc.path) {\r\n                neighbor.parent = current;\r\n            }\r\n        }\r\n    }\r\n    // --------------------------\r\n    // set road\r\n    // --------------------------\r\n    let old = closedTable[closedTable.length - 1];\r\n    if (old == meta) {\r\n        let path = [old];\r\n        while (true) {\r\n            path.unshift(old.parent);\r\n            old = old.parent;\r\n            if (old.status == "S")\r\n                break;\r\n        }\r\n        return path;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/decorators/changeValuesDec.ts\n/**\r\n * @description extension of main method\r\n */\r\nfunction changeValuesDec(_target, _name, descriptor) {\r\n    let func = descriptor.value;\r\n    descriptor.value = function (...args) {\r\n        func.bind(this)(...args);\r\n        // if (this.type == "ball" && type.hasOwnProperty("type")) {\r\n        if (this.type == "ball") {\r\n            this.html.innerHTML = "";\r\n            let ballHTML = document.createElement("div");\r\n            ballHTML.classList.add("ball");\r\n            ballHTML.style.backgroundColor = this.color;\r\n            this.html.appendChild(ballHTML);\r\n        }\r\n        // else if (this.type == null && type.hasOwnProperty("type")) {\r\n        else if (this.type == null) {\r\n            this.html.innerHTML = "";\r\n        }\r\n    };\r\n    return descriptor;\r\n}\r\n\n// CONCATENATED MODULE: ./src/square.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\r\n};\r\n\r\n/**@description class which stores information about square */\r\nclass Square {\r\n    /**\r\n     *\r\n     * @param parent reference to parent class\r\n     * @param boardHTML board html element with squares\r\n     * @param x x coordinate\r\n     * @param y y coordinate\r\n     */\r\n    constructor(parent, boardHTML, x, y) {\r\n        this.parent = parent;\r\n        this.boardHTML = boardHTML;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.html = document.createElement(\'div\');\r\n        this.boardHTML.appendChild(this.html);\r\n        this.type = null;\r\n        this.color = null;\r\n    }\r\n    /**\r\n     * @description functions which is used to change values of class\r\n     * @param type object with elements of class to change\r\n     */\r\n    changeValues(type) {\r\n        for (const key in type) {\r\n            this[key] = type[key];\r\n        }\r\n    }\r\n    /**@description change css of the html element */\r\n    changeBlinkingStatus(bool) {\r\n        this.html.classList[bool ? "add" : "remove"]("blinking");\r\n    }\r\n}\r\n__decorate([\r\n    changeValuesDec,\r\n    __metadata("design:type", Function),\r\n    __metadata("design:paramtypes", [Object]),\r\n    __metadata("design:returntype", void 0)\r\n], Square.prototype, "changeValues", null);\r\n\n// CONCATENATED MODULE: ./src/utils/extending.ts\n/**@description extends Array */\r\nfunction extending() {\r\n    Array.prototype.myRandom = function () {\r\n        return this[Math.floor(Math.random() * this.length)];\r\n    };\r\n    Array.prototype.removeIf = function (func) {\r\n        var i = 0;\r\n        while (i < this.length) {\r\n            if (func(this[i], i, this)) {\r\n                this.splice(i, 1);\r\n            }\r\n            else {\r\n                ++i;\r\n            }\r\n        }\r\n    };\r\n}\r\n\n// CONCATENATED MODULE: ./src/utils/useSleep.ts\n/**\r\n * @description stop the async code for chosen time\r\n * @param time time of sleep\r\n */\r\nfunction useSleep(time) {\r\n    return new Promise(resolve => {\r\n        setTimeout(function () {\r\n            resolve(true);\r\n        }, time);\r\n    });\r\n}\r\n\n// CONCATENATED MODULE: ./src/main.ts\nvar main_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar main_metadata = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\r\n};\r\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @description Main class\r\n */\r\nclass main_Main {\r\n    constructor() {\r\n        this.boardHTML = document.querySelector("#board");\r\n        this.container = document.getElementById("container");\r\n        this.lenX = 9;\r\n        this.lenY = 9;\r\n        this.board = [];\r\n        this.result = 0;\r\n        this.nextBalls = new NextBallsContainer_NextBallsContainer(this);\r\n        this.init();\r\n    }\r\n    /** @description function which is called after constructor */\r\n    init() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.setRecord();\r\n            this.createSquares();\r\n            this.randomizeBalls();\r\n            this.nextBalls.randomizeColors();\r\n            this.takeTurn();\r\n        });\r\n    }\r\n    /** @description this function shows the record */\r\n    setRecord() {\r\n        let { record } = window.localStorage;\r\n        document.getElementById("record-container").innerText = record == undefined ? 0 : record;\r\n    }\r\n    /** @description create squares in array */\r\n    createSquares() {\r\n        this.boardHTML.style.gridTemplateColumns = `repeat(${this.lenY},80px)`;\r\n        this.boardHTML.style.gridTemplateRows = `repeat(${this.lenX},80px)`;\r\n        // --------------------------\r\n        // push Squares to array\r\n        // --------------------------\r\n        for (let x = 0; x < this.lenX; x++) {\r\n            for (let y = 0; y < this.lenY; y++) {\r\n                let square = new Square(this, this.boardHTML, x, y);\r\n                this.board.push(square);\r\n            }\r\n        }\r\n    }\r\n    // -----------------------------------------------\r\n    // Take turn\r\n    // -----------------------------------------------\r\n    /** @description Turn loop */\r\n    takeTurn() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            /** @description Table for promises */\r\n            let promiseTable = [];\r\n            /** @description variable used to store clicked ball */\r\n            let chosenBall = null;\r\n            /** @description Boolean used to check if all squares are balls */\r\n            let allBall = true;\r\n            for (const square of this.board) {\r\n                // ---------------------------------------\r\n                // Add event listeners to the balls\r\n                // ---------------------------------------\r\n                if (square.type == "ball") {\r\n                    square.html.classList.add("clickable");\r\n                    square.html.onclick = () => {\r\n                        chosenBall === null || chosenBall === void 0 ? void 0 : chosenBall.changeBlinkingStatus(false);\r\n                        let table = [\r\n                            [-1, 0],\r\n                            [1, 0],\r\n                            [0, 1],\r\n                            [0, -1],\r\n                        ].filter(el1 => {\r\n                            let f_square = this.board.find(el => el.x == square.x + el1[0] && el.y == square.y + el1[1]);\r\n                            return (f_square === null || f_square === void 0 ? void 0 : f_square.type) != "ball" && f_square != undefined;\r\n                        });\r\n                        if (chosenBall != square && table.length != 0) {\r\n                            chosenBall = square;\r\n                            chosenBall.changeBlinkingStatus(true);\r\n                        }\r\n                        else {\r\n                            chosenBall = null;\r\n                        }\r\n                    };\r\n                }\r\n                // ------------------------------------------\r\n                // Add event listeners to the other squares\r\n                // ------------------------------------------\r\n                else {\r\n                    allBall = false;\r\n                    let promise = new Promise(resolve => {\r\n                        square.html.onclick = () => {\r\n                            if (chosenBall != null\r\n                                && this.getPath(chosenBall, square) != null) {\r\n                                resolve(square);\r\n                            }\r\n                        };\r\n                    });\r\n                    promiseTable.push(promise);\r\n                    square.html.onmouseleave = () => {\r\n                        this.board.forEach(el => {\r\n                            el.html.classList.remove("pathing");\r\n                        });\r\n                    };\r\n                    square.html.onmouseenter = () => {\r\n                        if (chosenBall == null)\r\n                            return;\r\n                        let nicePath = this.getPath(chosenBall, square);\r\n                        nicePath === null || nicePath === void 0 ? void 0 : nicePath.forEach(el => {\r\n                            el.html.classList.add("pathing");\r\n                        });\r\n                    };\r\n                }\r\n            }\r\n            if (allBall) {\r\n                this.endGame();\r\n                return;\r\n            }\r\n            /** @description square which is the meta of path */\r\n            let meta = yield Promise.race(promiseTable);\r\n            /** @description the shortest path*/\r\n            let nicePath = this.getPath(chosenBall, meta);\r\n            // ---------------------------------------\r\n            // clear squares\r\n            // ---------------------------------------\r\n            this.board.forEach(el => {\r\n                el.html.onclick = () => { };\r\n                el.html.onmouseleave = () => { };\r\n                el.html.onmouseenter = () => { };\r\n                el.html.setAttribute("class", "");\r\n            });\r\n            // ---------------------------------------\r\n            // swap squares\r\n            // ---------------------------------------\r\n            if (nicePath != null) {\r\n                /** @description color of the ball target*/\r\n                let color = chosenBall.color;\r\n                nicePath === null || nicePath === void 0 ? void 0 : nicePath.forEach(el => {\r\n                    el.html.classList.add("end-pathing");\r\n                });\r\n                for (let index = 1; index < nicePath.length; index++) {\r\n                    const currElement = this.board.find(el => (el.x == nicePath[index].x && el.y == nicePath[index].y));\r\n                    const prevElement = this.board.find(el => (el.x == nicePath[index - 1].x && el.y == nicePath[index - 1].y));\r\n                    currElement.changeValues({ type: "ball", color: color });\r\n                    prevElement.changeValues({ type: null, color: null });\r\n                    yield useSleep(40);\r\n                }\r\n            }\r\n            yield useSleep(300);\r\n            nicePath === null || nicePath === void 0 ? void 0 : nicePath.forEach(el => {\r\n                el.html.classList.remove("end-pathing");\r\n            });\r\n            /** @description smash balls*/\r\n            let bool = this.pointCheck();\r\n            if (!bool) {\r\n                this.randomizeBalls();\r\n                this.nextBalls.randomizeColors();\r\n                let bool = this.pointCheck();\r\n            }\r\n            this.takeTurn();\r\n        });\r\n    }\r\n    /** @description end Game void. Called when game is ended */\r\n    endGame() {\r\n        this.board.forEach(el => {\r\n            el.changeBlinkingStatus(false);\r\n            el.html.classList.remove("clickable");\r\n        });\r\n        if (parseInt(window.localStorage["record"]) < this.result || window.localStorage["record"] == undefined) {\r\n            window.localStorage["record"] = this.result;\r\n            this.setRecord();\r\n        }\r\n        /** @description download template */\r\n        let template = document.getElementById("end-game-template");\r\n        /** @description template content */\r\n        let content = template.content.cloneNode(true);\r\n        /** @description set score to endGame window */\r\n        let endGameP = content.querySelector(".end-game-p");\r\n        endGameP.innerText = `Twój wynik: ${this.result}`;\r\n        this.container.appendChild(content);\r\n    }\r\n    // ---------------------------------------\r\n    // randomize balls\r\n    // ---------------------------------------\r\n    /** @description chose square where will be ball */\r\n    randomizeBalls() {\r\n        this.nextBalls.arr.forEach(el => {\r\n            /** @description store square */\r\n            let square;\r\n            do {\r\n                square = this.board.myRandom();\r\n            } while (square.type == "ball" && !this.board.every(el => el.type == "ball"));\r\n            square.changeValues({\r\n                type: "ball",\r\n                color: el\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @description function used to get path\r\n     * @param chosenBall start of path\r\n     * @param square end of path\r\n     */\r\n    getPath(chosenBall, square) {\r\n        /** @description create special array for path finding */\r\n        let findTable = this.board.map(el => {\r\n            return {\r\n                x: el.x,\r\n                y: el.y,\r\n                html: el.html,\r\n                status: el == chosenBall\r\n                    ? "S"\r\n                    : el == square\r\n                        ? "M"\r\n                        : el.type == "ball"\r\n                            ? "B"\r\n                            : null,\r\n            };\r\n        });\r\n        return pathFinder(findTable);\r\n    }\r\n    /** @description function used to smash the balls */\r\n    pointCheck() {\r\n        /** @description storage for balls */\r\n        let doubleArr = [];\r\n        /** @description storage for balls */\r\n        let arr;\r\n        /** @description bool that is used to show if any ball has been hit or not */\r\n        let bool = false;\r\n        /** @description function used add balls to array */\r\n        let deleteBalls = () => {\r\n            if (arr.length >= 5) {\r\n                doubleArr.push([...arr]);\r\n                bool = true;\r\n            }\r\n        };\r\n        [true, false].forEach(elBool => {\r\n            arr = [];\r\n            for (let x = 0; x < (elBool ? this.lenX : this.lenY); x++) {\r\n                for (let y = 0; y < (elBool ? this.lenY : this.lenX); y++) {\r\n                    const element = this.board.find(el => el[elBool ? "x" : "y"] == x\r\n                        && el[elBool ? "y" : "x"] == y);\r\n                    if (arr.length == 0) {\r\n                        if (element.type == "ball") {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                    else if (arr[arr.length - 1].color != element.color) {\r\n                        deleteBalls();\r\n                        arr = [];\r\n                        if (element.type == "ball") {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                    else {\r\n                        arr.push(element);\r\n                    }\r\n                }\r\n                deleteBalls();\r\n                arr = [];\r\n            }\r\n        });\r\n        let loopOver = (y1, bool, elBool) => {\r\n            let y = y1;\r\n            let x = 0;\r\n            if (!elBool) {\r\n                let z = y;\r\n                x = y;\r\n                y = bool ? this.lenY - 1 : 0;\r\n            }\r\n            while (true) {\r\n                let el = this.board.find(el => el["x"] == x\r\n                    && el["y"] == y);\r\n                if (el != undefined) {\r\n                    if (arr.length == 0) {\r\n                        if (el.type == "ball") {\r\n                            arr.push(el);\r\n                        }\r\n                    }\r\n                    else if (arr[arr.length - 1].color != el.color) {\r\n                        deleteBalls();\r\n                        arr = [];\r\n                        if (el.type == "ball") {\r\n                            arr.push(el);\r\n                        }\r\n                    }\r\n                    else {\r\n                        arr.push(el);\r\n                    }\r\n                    if (bool) {\r\n                        x++;\r\n                        y--;\r\n                    }\r\n                    else {\r\n                        x++;\r\n                        y++;\r\n                    }\r\n                }\r\n                else {\r\n                    deleteBalls();\r\n                    arr = [];\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        [true, false].forEach(elBool => {\r\n            arr = [];\r\n            let max = elBool ? this.lenY : this.lenX;\r\n            for (let y1 = 0; y1 < max; y1++) {\r\n                loopOver(y1, true, elBool);\r\n            }\r\n        });\r\n        [true, false].forEach(elBool => {\r\n            arr = [];\r\n            let max = elBool ? this.lenY : this.lenX;\r\n            for (let y1 = max - 1; y1 >= 0; y1--) {\r\n                loopOver(y1, false, elBool);\r\n            }\r\n        });\r\n        // this.setPoints(doubleArr)\r\n        for (const arr of doubleArr) {\r\n            for (const square of arr) {\r\n                if (square.type != null) {\r\n                    square.changeValues({ color: null, type: null });\r\n                    this.result++;\r\n                }\r\n            }\r\n        }\r\n        return bool;\r\n    }\r\n}\r\nmain_decorate([\r\n    setPoints,\r\n    main_metadata("design:type", Function),\r\n    main_metadata("design:paramtypes", []),\r\n    main_metadata("design:returntype", void 0)\r\n], main_Main.prototype, "pointCheck", null);\r\nwindow.addEventListener("load", () => {\r\n    new main_Main();\r\n});\r\nextending();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);